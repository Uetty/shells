

# 定义发布

apiVersion: apps/v1
kind: StatefulSet
#kind: Deployment
metadata:
  name: app-jenkins
  namespace: infra-jenkins
spec: 
  replicas: 1
  selector:
    matchLabels: 
      app: jenkins
  serviceName: svc-jenkins
  template:
    metadata:
      labels: 
        app: jenkins
    spec:
      terminationGracePeriodSeconds: 10
      securityContext:
        runAsUser: 1000
        runAsGroup: 998
      volumes:
        - name: docker-cli
          hostPath:
            path: /usr/bin/docker
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
      containers:
        - name: jenkins
          image: jenkins/jenkins:2.263.1-lts
          # 镜像拉取策略
          imagePullPolicy: IfNotPresent
          ports:
              # 暴露的容器端口，相当于 docker -p containerPort
            - containerPort: 8080
              #如果指定，这必须是 IANA SVC NAME 并且在 pod 中是唯一的。 pod 中的每个命名端口都必须具有唯一的名称。服务可以引用的端口的名称。
              name: tcp
              # hostPort与hostIp相当于docker --net=host -p containerPort:hostIp:hostPort，跳过pod和service，直接将容器端口映射到宿主机
              # 但会仅在容器所在node作该映射，大多数容器不需要这个
              #hostPort：
              #hostIP：   
          env:
            - name: JAVA_OPTS
              value: "-Xmx768m -Dhudson.security.HudsonPrivateSecurityRealm.ID_REGEX=\"[a-zA-Z0-9_.@-]+\" -Duser.timezone=Asia/Shanghai"
            - name: app.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          #args:
          volumeMounts:
            - name: pvc-jenkins
              mountPath: /var/jenkins_home
            - name: docker-cli
              mountPath: /usr/bin/docker
            - name: docker-sock
              mountPath: /var/run/docker.sock
            - name: config-files
              mountPath: /var/jenkins_home/.m2/settings.xml
              readOnly: true
              subPath: mvn-setting-file
      volumes:
        - name: config-files
          secret:
            secretName: jenkins-files
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
        - name: docker-cli
          hostPath:
            path: /usr/bin/docker
  volumeClaimTemplates:
    - metadata:
        name: pvc-jenkins
        namespace: infra-jenkins
      spec:
        accessModes:
          - ReadWriteMany
        volumeMode: Filesystem
        resources:
          requests:
            storage: 15Gi
        storageClassName: local-storage-class
        selector:
          matchLabels:
            app: "jenkins"
#          matchExpressions:
#            - {key: app, operator: In, values: [jenkins]}
         

--- 

# 对外暴露的service

apiVersion: v1
kind: Service
metadata:
  name: svc-jenkins
  namespace: infra-jenkins
spec:
  # 要从外部访问服务，需要设定type，目前有：NodePort 和 Ingress，某些云服务商提供的k8s服务可能会提供其他类型，比如：LoadBalancer   
  # type: NodePort类型，需要指定具体端口，直接把服务暴露到宿主机的端口上，这时候k8s集群的每个节点(nodePort与port的区别，port只在本机器开端口)的物理主机上都会监听相应的端口
  # 由于node有可能挂掉，实际架构时固定的方式转发流量到固定的node IP上并不保险，所以有些云服务商的k8s服务在此基础上会提供负载均衡服务，能自动发现有哪些node（IP），并把流量负载均衡到node上
  # 如谷歌的：GCE，要完成这一步只需要将type: NodePort改为type: LoadBalancer （当然，得加钱）
  # Ingress类型，在k8s中部署nginx等转发程序，不在这里配置，它则需要再安装其他组件来支持（如：nginx/nginx-ingress），在安装了支持组件后，可通过 kind: Ingress 类型的发布来灵活调整转发流量的规则
  # 服务暴露的端口定义
  type: NodePort
  selector: 
    app: jenkins
  ports:
    - name: jenkins-web
      protocol: TCP
      # 指定pod上的其中一个containerPort端口
      targetPort: 8080
      # 进一步，将容器中暴露的containerPort(即本对象中的targetPort)端口，映射到serviceIp的端口上，使得通过serviceIp:port可以访问，但不能通过宿主机IP访问
      port: 80
      # 将容器中暴露的containerPort（即本对象中的targetPort端口），在映射到宿主机nodeIp的端口上（端口范围限制在30000-32xxx，可配置中修改范围），使得通过nodeIp:nodePort可以访问
      # nodePort方式暴露与hostPort方式暴露类型，但nodePort会在集群上所有结点上暴露，与servicePort一样均能从所有结点访问
      nodePort: 30001


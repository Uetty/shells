
apiVersion: v1
kind: Namespace
metadata:
  name: infra-nexus3


---

apiVersion: v1
kind: PersistentVolume
metadata: 
  name: pv-nexus3
  namespace: infra-nexus3
  labels: 
    app: nexus3
    app-group: nexus3
spec:
  capacity:
    storage: 75Gi
  volumeMode: Filesystem
  accessModes:
  # 可读可写，可被多个node挂载
  - ReadWriteMany
  # PVC删除时的回收策略: 保留
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage-class
  local:
    path: /var/virtual-volumes/nexus3
  # 用于将local卷的pod调度到正确的位置
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        # 匹配结点标签值
        # 可通过 kubectl label node nodeName labelName=labelValue 设置标签
        # 可通过 kubectl get node --show-labels 查看标签
        # 可通过 kubectl label node nodename labelName- 删除标签
        - key: k8s.node.name
          # 匹配方式：In Exists
          operator: In
          values: 
          - master


---



# 定义发布

apiVersion: apps/v1
kind: StatefulSet
#kind: Deployment
metadata:
  name: app-nexus3
  namespace: infra-nexus3
spec: 
  replicas: 1
  selector:
    matchLabels:
      app: nexus3
  serviceName: svc-nexus3
  template:
    metadata:
      labels: 
        app: nexus3
        app-group: nexus3
    spec:
      terminationGracePeriodSeconds: 10
      #nodeSelector:
        #"k8s.node.name": master
      containers:
        - name: nexus3
          image: sonatype/nexus3:3.38.0
          # 镜像拉取策略
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 888
            #            fsGroup: 888
#            privileged: true
          ports:
              # 暴露的容器端口，相当于 docker -p containerPort
            - containerPort: 8081
              # hostPort与hostIp相当于docker --net=host -p containerPort:hostIp:hostPort，跳过pod和service，直接将容器端口映射到宿主机
              # 但会仅在容器所在node作该映射，大多数容器不需要这个，而且这样一个节点不能部署多个pod
              #hostPort：
              #hostIP：  
            - containerPort: 5000
          #securityContext:
            # runAsUser: 101
          env: 
            - name: INSTALL4J_ADD_VM_PARAMS
              value: "-Xmx896m -Djava.util.prefs.userRoot=/nexus-data/userRoot"
            - name: app.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          #args:
          volumeMounts:
            - name: pvc-nexus3
              mountPath: /nexus-data
  volumeClaimTemplates:
    - metadata:
        name: pvc-nexus3
        namespace: infra-nexus3
      spec:
        accessModes:
          - ReadWriteMany
        volumeMode: Filesystem
        resources:
          requests:
            storage: 70Gi
        storageClassName: local-storage-class
        selector:
          matchLabels:
            app: nexus3
#          matchExpressions:
#            - {key: app, operator: In, values: [nexus3]}
         

--- 

# 对外暴露的service

apiVersion: v1
kind: Service
metadata:
  name: svc-nexus3
  namespace: infra-nexus3
spec:
  # 要从外部访问服务，需要设定type，目前有：NodePort 和 Ingress，某些云服务商提供的k8s服务可能会提供其他类型，比如：LoadBalancer   
  # type: NodePort类型，需要指定具体端口，直接把服务暴露到宿主机的端口上，这时候k8s集群的每个节点(nodePort与port的区别，port只在本机器开端口)的物理主机上都会监听相应的端口
  # 由于node有可能挂掉，实际架构时固定的方式转发流量到固定的node IP上并不保险，所以有些云服务商的k8s服务在此基础上会提供负载均衡服务，能自动发现有哪些node（IP），并把流量负载均衡到node上
  # 如谷歌的：GCE，要完成这一步只需要将type: NodePort改为type: LoadBalancer （当然，得加钱）
  # Ingress类型，在k8s中部署nginx等转发程序，不在这里配置，它则需要再安装其他组件来支持（如：nginx/nginx-ingress），在安装了支持组件后，可通过 kind: Ingress 类型的发布来灵活调整转发流量的规则
  # 服务暴露的端口定义
  type: NodePort
  selector: 
    app: nexus3
  ports:
    - name: nexus3-web
      protocol: TCP
      # 指定pod上的其中一个containerPort端口
      targetPort: 8081
      # 进一步，将容器中暴露的containerPort(即本对象中的targetPort)端口，映射到serviceIp的端口上，使得通过serviceIp:port可以访问，但不能通过宿主机IP访问
      port: 80
      # 将容器中暴露的containerPort（即本对象中的targetPort端口），在映射到宿主机nodeIp的端口上（端口范围限制在30000-32xxx，可配置中修改范围），使得通过nodeIp:nodePort可以访问
      # nodePort方式暴露与hostPort方式暴露类型，但nodePort会在集群上所有结点上暴露，与servicePort一样均能从所有结点访问
      nodePort: 11111
    - name: nexus3-repo
      protocol: TCP
      targetPort: 5000
      port: 5000
      nodePort: 22222

